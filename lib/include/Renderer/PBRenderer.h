#ifndef CUPBR_RENDERER_PBRENDERER_H
#define CUPBR_RENDERER_PBRENDERER_H

#include <memory>
#include <DataStructure/Image.h>
#include <Scene/Scene.h>
#include <DataStructure/Camera.h>

namespace cupbr
{
    /**
    *   @brief A class to model the physically based renderer
    */
    class PBRenderer
    {
        public:
        /**
        *   @brief Create the renderer
        *   @param[in] method The rendering method (default = RAYTRACER)
        */
        PBRenderer();

        /**
        *   @brief Destructor
        */
        ~PBRenderer();

        /**
        *   @brief Set the image output size
        *   @param[in] width The output width
        *   @param[in] height The output height
        */
        void setOutputSize(const uint32_t& width, const uint32_t& height);

        /**
        *   @brief Register the scene to render
        *   @param[in] scene The scene to render
        */
        void registerScene(Scene* scene);

        /**
        *   @brief Render the scene
        *   @param[in] camera The camera
        */
        void render(Camera* camera);

        /**
        *   @brief The output generated by render()
        *   @return The HDR image produced by the renderer
        */
        Image<Vector3float>* getOutputImage();

        /**
        *   @brief Reset the current render
        */
        void reset();

        /**
        *   @brief Change the RenderMethod used
        *   @param[in] name The name of the method
        */
        void changeRenderMethod(const std::string& name);

        private:
        class Impl;
        std::unique_ptr<Impl> impl;     /**< The implementation pointer */
    };
} //namespace cupbr

#endif